name: Run QA Tests

on:
  schedule:
    - cron: '0 */3 * * *'  # Runs every 3 hours
  workflow_dispatch:
    inputs:
      initiator:
        description: 'Name of the person initiating the test'
        required: true
        default: 'github-action'
      file_url:
        description: 'URL to the input.xlsx file'
        required: false
      passphrase:
        description: 'Secret phrase'
        required: true
      capture_video:
        description: 'Whether to capture video for all URLs (true/false)'
        required: true
        type: boolean
        default: false
      run_env:
        description: 'Environment to use (prod or test)'
        required: false
        default: 'prod'

jobs:
  run-qa-tests:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN }}
      VERCEL_URL: 'https://qa-automation-tool.vercel.app'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Validate pass-phrase for manual runs
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [ "${{ inputs.passphrase }}" != "${{ secrets.QA_PASSPHRASE }}" ]; then
            echo "::error ::Incorrect pass-phrase"
            exit 1
          fi

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Download custom input.xlsx for manual runs
        if: github.event_name == 'workflow_dispatch' && inputs.file_url != ''
        run: |
          echo "Downloading input file from ${{ inputs.file_url }}"
          curl -L -o input.xlsx "${{ inputs.file_url }}"

      - name: Set initiator
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "INITIATOR=scheduled" >> $GITHUB_ENV
          else
            echo "INITIATOR=${{ inputs.initiator }}" >> $GITHUB_ENV
          fi

      - name: Set environment-specific secrets
        id: set-secrets
        run: |
          if [ "${{ github.event.inputs.run_env }}" = "test" ] || [ "${{ github.event.inputs.run_env }}" = "preview" ]; then
            echo "Using TEST/Preview environment secrets"
            echo "SUPABASE_URL=${{ secrets.TEST_SUPABASE_URL }}" >> $GITHUB_ENV
            echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.TEST_SUPABASE_SERVICE_ROLE_KEY }}" >> $GITHUB_ENV
            echo "TEST_BLOB_READ_WRITE_TOKEN=${{ secrets.blobTest_READ_WRITE_TOKEN }}" >> $GITHUB_ENV
            echo "TEST_STORAGE_BUCKET=${{ secrets.TEST_STORAGE_BUCKET }}" >> $GITHUB_ENV
            echo "STORAGE_BUCKET=${{ secrets.TEST_STORAGE_BUCKET }}" >> $GITHUB_ENV
            echo "BLOB_READ_WRITE_TOKEN=${{ secrets.blobTest_READ_WRITE_TOKEN }}" >> $GITHUB_ENV
          else
            echo "Using PROD environment secrets"
            echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> $GITHUB_ENV
            echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> $GITHUB_ENV
            echo "BLOB_READ_WRITE_TOKEN=${{ secrets.BLOB_READ_WRITE_TOKEN }}" >> $GITHUB_ENV
            echo "STORAGE_BUCKET=${{ secrets.STORAGE_BUCKET }}" >> $GITHUB_ENV
          fi
          echo "Environment: ${{ github.event.inputs.run_env }}"

      - name: Run QA tests
        # Continue even if script exits with non-zero code (e.g., test failures)
        continue-on-error: true
        env:
          BLOB_READ_WRITE_TOKEN: ${{ env.BLOB_READ_WRITE_TOKEN }}
          BLOB_ALLOW_OVERWRITE: 'true'
          VERCEL_ENV: ${{ github.event.inputs.run_env }}
        run: |
          node api/qa-test.js \
            input.xlsx \
            results-${{ github.run_id }}.xlsx \
            "${{ env.INITIATOR }}" \
            "${{ inputs.capture_video }}"

      - name: Upload results artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa-test-results-${{ github.run_id }}
          path: results-${{ github.run_id }}.xlsx

      - name: Upload screenshots artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ github.run_id }}
          path: screenshots/*.png
          if-no-files-found: ignore

      - name: Check for video files
        id: check_videos
        run: |
          if [ -n "$(ls -A videos/*.webm 2>/dev/null)" ]; then
            echo "has_videos=true" >> $GITHUB_OUTPUT
          else
            echo "has_videos=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload videos artifact
        if: steps.check_videos.outputs.has_videos == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: videos-${{ github.run_id }}
          path: videos/*.webm

      - name: Upload debug logs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs-${{ github.run_id }}
          path: debug_logs/
          if-no-files-found: ignore

      - name: Send summary to Vercel
        if: always()
        run: |
          if [ ! -f summary.json ]; then
            echo "summary.json not found. Skipping sending summary to Vercel."
            exit 0
          fi
          echo "Sending summary to Vercel endpoint: $VERCEL_URL/api/store-run"
          PAYLOAD=$(jq -c \
            --arg runId "${{ github.run_id }}" \
            --arg crawlName "QA Run ${{ github.run_id }}" \
            --arg initiator "${{ env.INITIATOR }}" \
            '. + {runId: $runId, crawlName: $crawlName, initiator: $initiator}' \
            summary.json)
          echo "Payload:"
          echo "$PAYLOAD" | jq .
          RESPONSE=$(curl -X POST "$VERCEL_URL/api/store-run" \
               -H "Content-Type: application/json" \
               -d "$PAYLOAD" \
               --fail \
               --show-error \
               -w "%{http_code}" -s -o response.json || echo "FAILED")
          if [ "$RESPONSE" == "FAILED" ]; then
            echo "Failed to send summary to Vercel. Continuing workflow."
            exit 0
          fi
          echo "HTTP Status: $RESPONSE"
          if [ -f response.json ]; then
            echo "Response body:"
            cat response.json
          fi
          if [ "$RESPONSE" -ne "200" ]; then
            echo "Failed to send summary to Vercel. Status: $RESPONSE. Continuing workflow."
            exit 0
          fi
      
      - name: Upload summary.json artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: summary-json-${{ github.run_id }}
          path: summary.json