name: QA Crawl and Report

on:
  workflow_dispatch:
    inputs:
      initiatedBy:
        description: 'Who initiated the crawl?'
        required: true
        default: 'Manual Dispatch'
      inputFile:
        description: 'Input Excel file path (relative to repo root)'
        required: true
        default: 'input.xlsx'
      outputFile:
        description: 'Output Excel file path (relative to repo root)'
        required: true
        default: 'output.xlsx'
      captureVideo:
        description: 'Capture video of failed tests?'
        required: true
        type: boolean
        default: false

jobs:
  run_qa_crawl:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a recent Node.js version

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      # This step for creating input.xlsx had an incorrect conditional syntax for bash
      # and is likely a placeholder. Assuming input.xlsx is committed or handled
      # externally for typical runs, we will comment it out.
      # If dynamic creation is needed, this step needs a proper bash conditional
      # or a separate Node.js script.
      # - name: Create input.xlsx (for testing if not provided)
      #   run: |
      #     node -e "
      #       const ExcelJS = require('exceljs');
      #       const workbook = new ExcelJS.Workbook();
      #       const sheet = workbook.addWorksheet('URLs');
      #       sheet.addRow(['URL', 'Region', 'Test IDs']);
      #       sheet.addRow(['https://www.gehealthcare.com/en', 'US', 'TC-03, TC-04, TC-05, TC-06, TC-14']);
      #       sheet.addRow(['https://www.gehealthcare.in/products/diagnostic-ecg', 'IN', 'TC-03,TC-04,TC-05,TC-06,TC-09,TC-14']);
      #       workbook.xlsx.writeFile('input.xlsx');
      #       console.log('Dummy input.xlsx created.');
      #     "
      #   if: ${{ github.event.inputs.inputFile == 'input.xlsx' }} && ! -f input.xlsx # Correct bash check

      - name: Run QA Crawl
        run: |
          echo "Running QA test script..."
          # Pass inputs from the workflow_dispatch event as arguments
          node api/qa-test.js \
            ${{ github.event.inputs.inputFile }} \
            ${{ github.event.inputs.outputFile }} \
            "${{ github.event.inputs.initiatedBy }}" \
            ${{ github.event.inputs.captureVideo }}
        env:
          # Ensure all necessary Supabase and Blob storage secrets are passed
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN }}
          VERCEL_URL: ${{ secrets.VERCEL_URL }} # Needed for the /api/store-run call

      - name: Upload Results Excel
        uses: actions/upload-artifact@v4
        with:
          name: qa-crawl-results-${{ github.run_id }}
          path: ${{ github.event.inputs.outputFile }}
          if-no-files-found: warn # Don't fail the action if the file isn't created

      # Install jq to parse JSON
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Capture test summary and set env vars
        run: |
          echo "Capturing test run summary and setting environment variables..."
          if [ -f summary.json ]; then
            echo "Summary content:"
            cat summary.json # Log the summary content

            # Extract values using jq and set environment variables via GITHUB_ENV
            # GITHUB_ENV is a special file path provided by the Actions runner.
            # Writing lines in the format KEY=value to this file sets environment variables
            # that are available to subsequent steps in the same job.
            RUN_ID=$(jq -r '.runId' summary.json)
            SUCCESS_COUNT=$(jq -r '.successCount' summary.json)
            FAILURE_COUNT=$(jq -r '.failureCount' summary.json)
            INITIATED_BY=$(jq -r '.initiatedBy' summary.json)
            # You can extract other fields as needed, e.g., testFailureSummary

            # Set environment variables using the correct method
            echo "RUN_ID=${RUN_ID}" >> $GITHUB_ENV
            echo "SUCCESS_COUNT=${SUCCESS_COUNT}" >> $GITHUB_ENV
            echo "FAILURE_COUNT=${FAILURE_COUNT}" >> $GITHUB_ENV
            echo "INITIATED_BY=${INITIATED_BY}" >> $GITHUB_ENV

            echo "Environment variables set: RUN_ID, SUCCESS_COUNT, FAILURE_COUNT, INITIATED_BY"

          else
            echo "summary.json not found. Cannot capture summary."
            exit 1 # Fail the step if summary is missing
          fi
        shell: bash # Ensure bash is used for features like command substitution $()

