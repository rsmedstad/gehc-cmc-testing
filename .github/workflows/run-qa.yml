name: Run QA Tests

on:
  schedule:
    - cron: '0 */3 * * *'  # Runs every 3 hours
  workflow_dispatch:
    inputs:
      initiator:
        description: 'Name of the person initiating the test'
        required: true
      file_url:
        description: 'URL to the input.xlsx file (optional for standard test)'
        required: false
      passphrase:
        description: 'Secret phrase'
        required: true
      capture_video:
        description: 'Whether to capture video for all URLs (true/false)'
        default: 'false'

jobs:
  qa:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN }}
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Validate pass-phrase for manual runs
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [ "${{ inputs.passphrase }}" != "${{ secrets.QA_PASSPHRASE }}" ]; then
            echo "::error ::Incorrect pass-phrase"; exit 1; fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Use standard input.xlsx for standard test
        if: github.event_name == 'workflow_dispatch' && inputs.file_url == ''
        run: |
          # No need to copy; use input.xlsx directly
           echo "Using existing input.xlsx"

      - name: Download custom input.xlsx
        if: github.event_name == 'workflow_dispatch' && inputs.file_url != ''
        run: |
          curl -L -o input.xlsx "${{ inputs.file_url }}"

      - name: Set initiator
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "INITIATOR=scheduled" >> $GITHUB_ENV
          else
            echo "INITIATOR=${{ inputs.initiator }}" >> $GITHUB_ENV
          fi

      - name: Run QA test
        continue-on-error: true
        run: |
          node api/qa-test.js input.xlsx results-${{ github.run_id }}.xlsx "${{ env.INITIATOR }}" "${{ inputs.capture_video }}"

      - name: Capture test summary and create summary.json
        run: |
          if [ -f summary.json ]; then
            SUMMARY=$(cat summary.json)
            echo "SUMMARY=$SUMMARY" >> $GITHUB_ENV
            echo "Summary captured: $SUMMARY"
          else
            echo "summary.json not found, creating default summary"
            echo '{"passed": 0, "failed": 0}' > summary.json
            echo "SUMMARY={\"passed\": 0, \"failed\": 0}" >> $GITHUB_ENV
          fi

      - name: Upload summary JSON artifact
        uses: actions/upload-artifact@v4
        with:
          name: summary-json-${{ github.run_id }}
          path: summary.json

      - name: Send summary to Vercel
        env:
          VERCEL_URL: "https://qa-automation-tool.vercel.app"
        run: |
          curl -X POST "$VERCEL_URL/api/store-run" \
               -H "Content-Type: application/json" \
               -d '{
                 "runId": "${{ github.run_id }}",
                 "crawlName": "QA Run ${{ github.run_id }}",
                 "date": "${{ github.event.head_commit.timestamp || github.event.workflow_run.created_at }}",
                 "successCount": '"$(echo $SUMMARY | jq '.passed')"',
                 "failureCount": '"$(echo $SUMMARY | jq '.failed')"',
                 "initiator": "${{ env.INITIATOR }}"
               }'

      - name: Upload results artifact
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ github.run_id }}
          path: results-*.xlsx

      - name: Upload screenshots artifact
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ github.run_id }}
          path: screenshots/*.png

      - name: Check for video files
        id: check_videos
        run: |
          if [ -n "$(ls -A videos/*.webm 2>/dev/null)" ]; then
            echo "has_videos=true" >> $GITHUB_OUTPUT
          else
            echo "has_videos=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload videos artifact
        if: steps.check_videos.outputs.has_videos == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: videos-${{ github.run_id }}
          path: videos/*.webm

      - name: Log artifact name
        run: |
          echo "Results artifact uploaded as: results-${{ github.run_id }}"