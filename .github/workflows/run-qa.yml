name: Run QA now
on:
  workflow_dispatch:
    inputs:
      passphrase:
        description: Secret phrase
        required: true
      asset_id:
        description: ID of draft-release asset (input.xlsx)
        required: true
      release_id:
        description: ID of the draft release
        required: true
  # Future scheduling support (commented out for now)
  # schedule:
  #   - cron: '0 0 * * *' # Daily at midnight UTC

jobs:
  qa:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Validate pass-phrase
        run: |
          if [ "${{ inputs.passphrase }}" != "${{ secrets.QA_PASSPHRASE }}" ]; then
            echo "::error ::Incorrect pass-phrase"; exit 1; fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      # Download the XLSX file
      - name: Download input asset
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          curl -L \
            -H "Authorization: Bearer $GH_PAT" \
            -H "Accept: application/octet-stream" \
            "https://api.github.com/repos/${{ github.repository }}/releases/assets/${{ inputs.asset_id }}" \
            -o input.xlsx

      # Verify file presence
      - name: Check input.xlsx exists
        run: ls -l input.xlsx

      # Run the QA script
      - name: Run QA
        run: node qa-test.js input.xlsx

      # Upload results artifact
      - name: Upload QA results
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ github.run_id }}
          path: results-*.xlsx

      # Upload screenshots artifact
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ github.run_id }}
          path: screenshots/*.png

      # Log artifact name for clarity
      - name: Log artifact name
        run: |
          echo "Results artifact uploaded as: results-${{ github.run_id }}"

      # Clean up the temporary release
      - name: Delete temp release + asset
        if: always()
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          curl -X DELETE \
            -H "Authorization: Bearer $GH_PAT" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ inputs.release_id }}"